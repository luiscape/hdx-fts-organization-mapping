NA,
fts[grep(hdx$display_name[i], fts$name),]$id
)
if (is.na(fts_id)) = fts[grep(hdx$display_name[i], fts$abbreviation),]$id
}
else fts_id = NA
return(fts_id)
}
# Defining the schema for the final data.frame.
it <- data.frame(hdx_id = hdx$name[i],
collectFTSid(fts_n_perfect),  # collecting the FTS id
fts_n_perfect = fts_n_perfect,
fts_n_fuzzy = length(agrep(hdx$display_name[i], fts$name)) +
length(agrep(hdx$display_name[i], fts$abbreviation))
)
# Iterating over the data.frames
if (i == 1) out <- it
else out <- rbind(out, it)
}
cat('\nDone.\n')
cat('-------------------------------- \n')
return(out)
}
x <- makeComparisons()
# Compare
makeComparisons <- function() {
# loading local data
fts = read.csv('data/fts_organizations.csv')
hdx = read.csv('data/hdx_org_list.csv')
total = nrow(hdx)
cat('-------------------------------- \n')
cat('Making comparisons: ... \n')
pb <- txtProgressBar(min = 0, max = total, style = 3, char ='.')
for(i in 1:total) {
setTxtProgressBar(pb, i)
# Calculating how many fit the text search
# perfectly. This returns how many of those
# matches were found.
fts_n_perfect = length(grep(hdx$display_name[i], fts$abbreviation, fixed = T)) +
length(grep(hdx$display_name[i], fts$name, fixed = T))
collectFTSid <- function(df) {
if (df == 1) {
fts_id = ifelse(
is.null(fts[grep(hdx$display_name[i], fts$name),]$id),
NA,
fts[grep(hdx$display_name[i], fts$name),]$id
)
if (is.na(fts_id)) = fts[grep(hdx$display_name[i], fts$abbreviation),]$id
}
else fts_id = NA
return(fts_id)
}
# Defining the schema for the final data.frame.
it <- data.frame(hdx_id = hdx$name[i],
collectFTSid(fts_n_perfect),  # collecting the FTS id
fts_n_perfect = fts_n_perfect,
fts_n_fuzzy = length(agrep(hdx$display_name[i], fts$name)) +
length(agrep(hdx$display_name[i], fts$abbreviation))
)
# Iterating over the data.frames
if (i == 1) out <- it
else out <- rbind(out, it)
}
cat('\nDone.\n')
cat('-------------------------------- \n')
return(out)
}
# Compare
makeComparisons <- function() {
# loading local data
fts = read.csv('data/fts_organizations.csv')
hdx = read.csv('data/hdx_org_list.csv')
total = nrow(hdx)
cat('-------------------------------- \n')
cat('Making comparisons: ... \n')
pb <- txtProgressBar(min = 0, max = total, style = 3, char ='.')
for(i in 1:total) {
setTxtProgressBar(pb, i)
# Calculating how many fit the text search
# perfectly. This returns how many of those
# matches were found.
fts_n_perfect = length(grep(hdx$display_name[i], fts$abbreviation, fixed = T)) +
length(grep(hdx$display_name[i], fts$name, fixed = T))
collectFTSid <- function(df) {
if (df == 1) {
fts_id = ifelse(
is.null(fts[grep(hdx$display_name[i], fts$name),]$id),
NA,
fts[grep(hdx$display_name[i], fts$name),]$id
)
if (is.na(fts_id)) = fts[grep(hdx$display_name[i], fts$abbreviation),]$id
}
else fts_id = NA
return(fts_id)
}
print(collectFTSid(fts_n_perfect))
# Defining the schema for the final data.frame.
it <- data.frame(hdx_id = hdx$name[i],
x = NA,  # collecting the FTS id
fts_n_perfect = fts_n_perfect,
fts_n_fuzzy = length(agrep(hdx$display_name[i], fts$name)) +
length(agrep(hdx$display_name[i], fts$abbreviation))
)
# Iterating over the data.frames
if (i == 1) out <- it
else out <- rbind(out, it)
}
cat('\nDone.\n')
cat('-------------------------------- \n')
return(out)
}
x <- makeComparisons()
# Compare
makeComparisons <- function() {
# loading local data
fts = read.csv('data/fts_organizations.csv')
hdx = read.csv('data/hdx_org_list.csv')
total = nrow(hdx)
cat('-------------------------------- \n')
cat('Making comparisons: ... \n')
pb <- txtProgressBar(min = 0, max = total, style = 3, char ='.')
for(i in 1:total) {
setTxtProgressBar(pb, i)
# Calculating how many fit the text search
# perfectly. This returns how many of those
# matches were found.
fts_n_perfect = length(grep(hdx$display_name[i], fts$abbreviation, fixed = T)) +
length(grep(hdx$display_name[i], fts$name, fixed = T))
collectFTSid <- function(df, i = i, hdx = hdx) {
if (df == 1) {
fts_id = ifelse(
is.null(fts[grep(hdx$display_name[i], fts$name),]$id),
NA,
fts[grep(hdx$display_name[i], fts$name),]$id
)
if (is.na(fts_id)) = fts[grep(hdx$display_name[i], fts$abbreviation),]$id
}
else fts_id = NA
return(fts_id)
}
print(collectFTSid(fts_n_perfect))
# Defining the schema for the final data.frame.
it <- data.frame(hdx_id = hdx$name[i],
x = NA,  # collecting the FTS id
fts_n_perfect = fts_n_perfect,
fts_n_fuzzy = length(agrep(hdx$display_name[i], fts$name)) +
length(agrep(hdx$display_name[i], fts$abbreviation))
)
# Iterating over the data.frames
if (i == 1) out <- it
else out <- rbind(out, it)
}
cat('\nDone.\n')
cat('-------------------------------- \n')
return(out)
}
x <- makeComparisons()
# Compare
makeComparisons <- function() {
# loading local data
fts = read.csv('data/fts_organizations.csv')
hdx = read.csv('data/hdx_org_list.csv')
total = nrow(hdx)
cat('-------------------------------- \n')
cat('Making comparisons: ... \n')
pb <- txtProgressBar(min = 0, max = total, style = 3, char ='.')
for(i in 1:total) {
setTxtProgressBar(pb, i)
# Calculating how many fit the text search
# perfectly. This returns how many of those
# matches were found.
fts_n_perfect = length(grep(hdx$display_name[i], fts$abbreviation, fixed = T)) +
length(grep(hdx$display_name[i], fts$name, fixed = T))
collectFTSid <- function(df, i = i, hdx = hdx) {
if (df == 1) {
fts_id = ifelse(
is.null(fts[grep(hdx$display_name[i], fts$name),]$id),
NA,
fts[grep(hdx$display_name[i], fts$name),]$id
)
if (is.na(fts_id)) = fts[grep(hdx$display_name[i], fts$abbreviation),]$id
}
else fts_id = NA
return(fts_id)
}
print(collectFTSid(fts_n_perfect))
# Defining the schema for the final data.frame.
it <- data.frame(hdx_id = hdx$name[i],
x = NA,  # collecting the FTS id
fts_n_perfect = fts_n_perfect,
fts_n_fuzzy = length(agrep(hdx$display_name[i], fts$name)) +
length(agrep(hdx$display_name[i], fts$abbreviation))
)
# Iterating over the data.frames
if (i == 1) out <- it
else out <- rbind(out, it)
}
cat('\nDone.\n')
cat('-------------------------------- \n')
return(out)
}
# x <- makeComparisons()
# Compare
makeComparisons <- function() {
# loading local data
fts = read.csv('data/fts_organizations.csv')
hdx = read.csv('data/hdx_org_list.csv')
total = nrow(hdx)
cat('-------------------------------- \n')
cat('Making comparisons: ... \n')
pb <- txtProgressBar(min = 0, max = total, style = 3, char ='.')
for(i in 1:total) {
setTxtProgressBar(pb, i)
# Calculating how many fit the text search
# perfectly. This returns how many of those
# matches were found.
fts_n_perfect = length(grep(hdx$display_name[i], fts$abbreviation, fixed = T)) +
length(grep(hdx$display_name[i], fts$name, fixed = T))
collectFTSid <- function(df, i = i, hdx = hdx) {
if (df == 1) {
fts_id = ifelse(
is.null(fts[grep(hdx$display_name[i], fts$name),]$id),
NA,
fts[grep(hdx$display_name[i], fts$name),]$id
)
if (is.na(fts_id)) fts_id = fts[grep(hdx$display_name[i], fts$abbreviation),]$id
}
else fts_id = NA
return(fts_id)
}
print(collectFTSid(fts_n_perfect))
# Defining the schema for the final data.frame.
it <- data.frame(hdx_id = hdx$name[i],
x = NA,  # collecting the FTS id
fts_n_perfect = fts_n_perfect,
fts_n_fuzzy = length(agrep(hdx$display_name[i], fts$name)) +
length(agrep(hdx$display_name[i], fts$abbreviation))
)
# Iterating over the data.frames
if (i == 1) out <- it
else out <- rbind(out, it)
}
cat('\nDone.\n')
cat('-------------------------------- \n')
return(out)
}
# x <- makeComparisons()
x <- makeComparisons()
makeComparisons <- function() {
# loading local data
fts = read.csv('data/fts_organizations.csv')
hdx = read.csv('data/hdx_org_list.csv')
total = nrow(hdx)
cat('-------------------------------- \n')
cat('Making comparisons: ... \n')
pb <- txtProgressBar(min = 0, max = total, style = 3, char ='.')
for(i in 1:total) {
setTxtProgressBar(pb, i)
# Calculating how many fit the text search
# perfectly. This returns how many of those
# matches were found.
fts_n_perfect = length(grep(hdx$display_name[i], fts$abbreviation, fixed = T)) +
length(grep(hdx$display_name[i], fts$name, fixed = T))
collectFTSid <- function(df, i = i, hdx = hdx) {
if (df == 1) {
fts_id = ifelse(
is.null(fts[grep(hdx$display_name[i], fts$name),]$id),
NA,
fts[grep(hdx$display_name[i], fts$name),]$id
)
if (is.na(fts_id)) fts_id = fts[grep(hdx$display_name[i], fts$abbreviation),]$id
}
else fts_id = NA
return(fts_id)
}
print(collectFTSid(fts_n_perfect))
# Defining the schema for the final data.frame.
it <- data.frame(hdx_id = hdx$name[i],
x = NA,  # collecting the FTS id
fts_n_perfect = fts_n_perfect,
fts_n_fuzzy = length(agrep(hdx$display_name[i], fts$name)) +
length(agrep(hdx$display_name[i], fts$abbreviation))
)
# Iterating over the data.frames
if (i == 1) out <- it
else out <- rbind(out, it)
}
cat('\nDone.\n')
cat('-------------------------------- \n')
return(out)
}
x <- makeComparisons()
# Compare
makeComparisons <- function() {
# loading local data
fts = read.csv('data/fts_organizations.csv')
hdx = read.csv('data/hdx_org_list.csv')
total = nrow(hdx)
cat('-------------------------------- \n')
cat('Making comparisons: ... \n')
pb <- txtProgressBar(min = 0, max = total, style = 3, char ='.')
for(i in 1:total) {
setTxtProgressBar(pb, i)
# Calculating how many fit the text search
# perfectly. This returns how many of those
# matches were found.
fts_n_perfect = length(grep(hdx$display_name[i], fts$abbreviation, fixed = T)) +
length(grep(hdx$display_name[i], fts$name, fixed = T))
collectFTSid <- function(df, j = i, b = hdx) {
if (df == 1) {
fts_id = ifelse(
is.null(fts[grep(b$display_name[j], fts$name),]$id),
NA,
fts[grep(b$display_name[j], fts$name),]$id
)
if (is.na(fts_id)) fts_id = fts[grep(b$display_name[j], fts$abbreviation),]$id
}
else fts_id = NA
return(fts_id)
}
print(collectFTSid(fts_n_perfect))
# Defining the schema for the final data.frame.
it <- data.frame(hdx_id = hdx$name[i],
x = NA,  # collecting the FTS id
fts_n_perfect = fts_n_perfect,
fts_n_fuzzy = length(agrep(hdx$display_name[i], fts$name)) +
length(agrep(hdx$display_name[i], fts$abbreviation))
)
# Iterating over the data.frames
if (i == 1) out <- it
else out <- rbind(out, it)
}
cat('\nDone.\n')
cat('-------------------------------- \n')
return(out)
}
x <- makeComparisons()
View(x)
# Compare
makeComparisons <- function() {
# loading local data
fts = read.csv('data/fts_organizations.csv')
hdx = read.csv('data/hdx_org_list.csv')
total = nrow(hdx)
cat('-------------------------------- \n')
cat('Making comparisons: ... \n')
pb <- txtProgressBar(min = 0, max = total, style = 3, char ='.')
for(i in 1:total) {
setTxtProgressBar(pb, i)
# Calculating how many fit the text search
# perfectly. This returns how many of those
# matches were found.
fts_n_perfect = length(grep(hdx$display_name[i], fts$abbreviation, fixed = T)) +
length(grep(hdx$display_name[i], fts$name, fixed = T))
collectFTSid <- function(df, j = i, b = hdx) {
if (df == 1) {
fts_id = ifelse(
is.null(fts[grep(b$display_name[j], fts$name),]$id),
NA,
fts[grep(b$display_name[j], fts$name),]$id
)
if (is.na(fts_id)) fts_id = fts[grep(b$display_name[j], fts$abbreviation),]$id
}
else fts_id = NA
return(fts_id)
}
# Defining the schema for the final data.frame.
it <- data.frame(hdx_id = hdx$name[i],
fts_id = collectFTSid(fts_n_perfect),  # collecting the FTS id
fts_n_perfect = fts_n_perfect,
fts_n_fuzzy = length(agrep(hdx$display_name[i], fts$name)) +
length(agrep(hdx$display_name[i], fts$abbreviation))
)
# Iterating over the data.frames
if (i == 1) out <- it
else out <- rbind(out, it)
}
cat('\nDone.\n')
cat('-------------------------------- \n')
return(out)
}
x <- makeComparisons()
View(x)
names(hdx)
hdx = read.csv('data/hdx_org_list.csv')
names(hdx)
# Compare
makeComparisons <- function() {
# loading local data
fts = read.csv('data/fts_organizations.csv')
hdx = read.csv('data/hdx_org_list.csv')
total = nrow(hdx)
cat('-------------------------------- \n')
cat('Making comparisons: ... \n')
pb <- txtProgressBar(min = 0, max = total, style = 3, char ='.')
for(i in 1:total) {
setTxtProgressBar(pb, i)
# Calculating how many fit the text search
# perfectly. This returns how many of those
# matches were found.
fts_n_perfect = length(grep(hdx$display_name[i], fts$abbreviation, fixed = T)) +
length(grep(hdx$display_name[i], fts$name, fixed = T))
collectFTSid <- function(df, j = i, b = hdx) {
if (df == 1) {
fts_id = ifelse(
is.null(fts[grep(b$display_name[j], fts$name),]$id),
NA,
fts[grep(b$display_name[j], fts$name),]$id
)
if (is.na(fts_id)) fts_id = fts[grep(b$display_name[j], fts$abbreviation),]$id
}
else fts_id = NA
return(fts_id)
}
# Defining the schema for the final data.frame.
it <- data.frame(hdx_id = hdx$name[i],
hdx_name = hdx$display_name[i],
fts_id = collectFTSid(fts_n_perfect),  # collecting the FTS id
fts_n_perfect = fts_n_perfect,
fts_n_fuzzy = length(agrep(hdx$display_name[i], fts$name)) +
length(agrep(hdx$display_name[i], fts$abbreviation))
)
# Iterating over the data.frames
if (i == 1) out <- it
else out <- rbind(out, it)
}
cat('\nDone.\n')
cat('-------------------------------- \n')
return(out)
}
x <- makeComparisons()
View(x)
# Compare
makeComparisons <- function() {
# loading local data
fts = read.csv('data/fts_organizations.csv')
hdx = read.csv('data/hdx_org_list.csv')
total = nrow(hdx)
cat('-------------------------------- \n')
cat('Making comparisons: ... \n')
pb <- txtProgressBar(min = 0, max = total, style = 3, char ='.')
for(i in 1:total) {
setTxtProgressBar(pb, i)
# Calculating how many fit the text search
# perfectly. This returns how many of those
# matches were found.
fts_n_perfect = length(grep(hdx$display_name[i], fts$abbreviation, fixed = T)) +
length(grep(hdx$display_name[i], fts$name, fixed = T))
collectFTSid <- function(df, j = i, b = hdx) {
if (df == 1 | df == 2) {
fts_id = ifelse(
is.null(fts[grep(b$display_name[j], fts$name),]$id),
NA,
fts[grep(b$display_name[j], fts$name),]$id
)
if (is.na(fts_id)) fts_id = fts[grep(b$display_name[j], fts$abbreviation),]$id
}
else fts_id = NA
return(fts_id)
}
# Defining the schema for the final data.frame.
it <- data.frame(hdx_id = hdx$name[i],
hdx_name = hdx$display_name[i],
fts_id = collectFTSid(fts_n_perfect),  # collecting the FTS id
fts_n_perfect = fts_n_perfect,
fts_n_fuzzy = length(agrep(hdx$display_name[i], fts$name)) +
length(agrep(hdx$display_name[i], fts$abbreviation))
)
# Iterating over the data.frames
if (i == 1) out <- it
else out <- rbind(out, it)
}
cat('\nDone.\n')
cat('-------------------------------- \n')
return(out)
}
x <- makeComparisons()
nrow(x)
View(x)
?grep
hdx = read.csv('data/hdx_org_list.csv')
names(hdx)
write.csv(x, 'data/correct_codes.csv', row.names = F)
data <- read.csv('data/correct_codes.csv')
View(data)
names(data)
nrow(data[is.na(data$fts_id),])
nrow(data[!is.na(data$fts_id),])
nrow(data[!is.na(data$fts_id),]) / nrow(data)
rate <- nrow(data[!is.na(data$fts_id),]) / nrow(data); rates
rate <- nrow(data[!is.na(data$fts_id),]) / nrow(data); rate
rate <- (nrow(data[!is.na(data$fts_id),]) / nrow(data)) * 100; rate
odd <-data[is.na(data$fts_id),]
View(odd)
data <- read.csv('data/correct_codes.csv')
# Calculating the rate of success.
rate <- (nrow(data[!is.na(data$fts_id),]) / nrow(data)) * 100; rate
odd <-data[is.na(data$fts_id),]
View(odd)
library(ggplot2)
names(odd)
ggplot(odd) + theme_bw() +
geom_bar(aes(hunch, fill = hunch), stat = 'bin')
data <- read.csv('data/correct_codes.csv')
rate <- (nrow(data[!is.na(data$fts_id),]) / nrow(data)) * 100; rate
nrow(data[!is.na(data$fts_id),])
nrow(data)
55 - 89
# Separating only the odd ones
odd <-data[is.na(data$fts_id),]
ggplot(odd) + theme_bw() +
geom_bar(aes(hunch, fill = hunch), stat = 'bin')
